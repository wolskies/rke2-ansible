# SPDX-License-Identifier: GPL-3.0-or-later
---
dependency:
  name: galaxy
  options:
    requirements-file: requirements.yml

driver:
  name: docker

platforms:
  - name: controller-1
    image: geerlingguy/docker-ubuntu2404-ansible:latest
    pre_build_image: true
    privileged: true
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:rw
    cgroupns_mode: host
    command: "/lib/systemd/systemd"
    tmpfs:
      - /run
      - /tmp
    capabilities:
      - SYS_ADMIN
    groups:
      - controllers
      - rke2
    networks:
      - name: rke2-network

  - name: controller-2
    image: geerlingguy/docker-ubuntu2404-ansible:latest
    pre_build_image: true
    privileged: true
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:rw
    cgroupns_mode: host
    command: "/lib/systemd/systemd"
    tmpfs:
      - /run
      - /tmp
    capabilities:
      - SYS_ADMIN
    groups:
      - controllers
      - rke2
    networks:
      - name: rke2-network

  - name: agent-1
    image: geerlingguy/docker-ubuntu2404-ansible:latest
    pre_build_image: true
    privileged: true
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:rw
    cgroupns_mode: host
    command: "/lib/systemd/systemd"
    tmpfs:
      - /run
      - /tmp
    capabilities:
      - SYS_ADMIN
    groups:
      - agents
      - rke2
    networks:
      - name: rke2-network

  - name: agent-2
    image: geerlingguy/docker-ubuntu2404-ansible:latest
    pre_build_image: true
    privileged: true
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:rw
    cgroupns_mode: host
    command: "/lib/systemd/systemd"
    tmpfs:
      - /run
      - /tmp
    capabilities:
      - SYS_ADMIN
    groups:
      - agents
      - rke2
    networks:
      - name: rke2-network

provisioner:
  name: ansible
  inventory:
    group_vars:
      all:
        ansible_user: root
        # Full stack configuration for deployment testing
        rke2_version: "v1.33.3+rke2r1"
        vip: "192.168.100.30"
        vip_interface: "eth0"
        lb_range: "192.168.100.50-192.168.100.60"
        management_network: "192.168.0.0/16"

        # Component installation flags
        install_metallb: true
        install_kube_vip: true
        install_helm: true
        install_mysql_operator: false
        install_rancher: false
        install_minio: false
        install_rook: false

        # Test-specific overrides
        skip_actual_k8s_deployment: true
        test_mode: true

        # Component versions
        helm_version: "v3.18.4"
        kube_vip_version: "v0.8.14"
        metallb_version: "0.15.0"
        mysql_operator_chart_version: "2.2.5"

  config_options:
    defaults:
      interpreter_python: auto_silent
      callback_whitelist: profile_tasks, timer, yaml
      stdout_callback: yaml
      timeout: 60
    ssh_connection:
      pipelining: false

scenario:
  test_sequence:
    - dependency
    - cleanup
    - destroy
    - syntax
    - create
    - prepare
    - converge
    - cleanup
    - destroy
