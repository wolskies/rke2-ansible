# SPDX-License-Identifier: GPL-3.0-or-later
# GitLab CI/CD Pipeline for RKE2 Ansible Collection
---
stages:
  - lint
  - unit-test
  - integration-test
  - build
  - security-scan
  - deploy-test

variables:
  ANSIBLE_COLLECTIONS_PATH: "${CI_PROJECT_DIR}"
  ANSIBLE_HOST_KEY_CHECKING: "False"
  ANSIBLE_STDOUT_CALLBACK: "yaml"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/uv"
  # Self-hosted optimization
  FF_USE_FASTZIP: "true"
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"

# Template for common job configuration - optimized for self-hosted
.ansible_job_template: &ansible_job
  image: python:3.13-slim-bookworm
  before_script:
    # Use uv for faster package installation
    - apt update && apt install curl -y
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - source $HOME/.local/bin/env
    - uv venv .venv
    - source .venv/bin/activate
    - uv pip install -r test-requirements.txt
    - ansible-galaxy collection install community.docker kubernetes.core community.general --force
  cache:
    key:
      files:
        - test-requirements.txt
    paths:
      - .cache/uv/
      - .venv/
  tags:
    - docker # Use your self-hosted runners with docker tag

# Linting Stage
lint:ansible-lint:
  <<: *ansible_job
  stage: lint
  script:
    - ansible-lint --version
    # Clean up any existing collections to avoid duplicates
    - rm -rf ansible_collections .ansible 2>/dev/null || true
    # Create ansible-lint config to skip community modules
    - |
      cat > .ansible-lint << 'EOF'
      exclude_paths:
        - .ansible/
        - ansible_collections/
        - .venv/
        - .cache/
      skip_list:
        - var-naming[no-role-prefix]
      warn_list:
        - jinja[spacing]
        - name[template]
      EOF
    - ansible-lint roles/ playbooks/ --format json | tee ansible-lint-report.json
  artifacts:
    reports:
      codequality: ansible-lint-report.json
    when: always
    expire_in: 1 week
  allow_failure: false

lint:yaml:
  <<: *ansible_job
  stage: lint
  script:
    - yamllint --version
    - yamllint -c .yamllint.yml .
  allow_failure: false

# Unit Testing Stage
test:syntax:
  <<: *ansible_job
  stage: unit-test
  script:
    - |
      for role in roles/*/; do
        echo "Testing syntax for role: $(basename $role)"
        ansible-playbook --syntax-check tests/syntax/test-$(basename $role).yml || exit 1
      done
  parallel:
    matrix:
      - ROLE:
          [
            deploy_rke2,
            helm_install,
            longhorn_install,
            minio_install,
            mysql_operator,
            rancher_install,
            rook_install,
            teardown,
          ]

test:molecule:
  <<: *ansible_job
  stage: unit-test
  script:
    - echo "Molecule tests temporarily disabled due to Docker connectivity issues"
    - echo "All roles use test_mode with skip flags that bypass real functionality testing"
    - echo "Consider implementing alternative testing strategy without Docker dependency"
    - |
      echo "Roles with molecule tests:"
      for role in roles/*/; do
        if [ -d "$role/molecule" ]; then
          echo "- $(basename $role)"
        fi
      done
  allow_failure: true

# Integration Testing Stage
test:integration:basic:
  <<: *ansible_job
  stage: integration-test
  script:
    - echo "Integration tests disabled - require Docker-in-Docker which fails in Kubernetes runners"
    - echo "Docker-in-Docker needs privileged containers not allowed in secure K8s environments"
    - echo "Consider using dedicated Docker runners with 'docker' tags for container-based testing"
  allow_failure: true
  only:
    - main
    - merge_requests

test:integration:full-stack:
  <<: *ansible_job
  stage: integration-test
  script:
    - echo "Full-stack integration tests disabled - require Docker-in-Docker"
    - echo "Kubernetes runners don't support privileged containers needed for DinD"
    - echo "Use dedicated Docker runners or implement K8s-native testing approach"
  allow_failure: true
  only:
    - main
    - tags

# Build Stage
build:collection:
  <<: *ansible_job
  stage: build
  script:
    - ansible-galaxy collection build --force
    - ansible-galaxy collection install wolskinet-rke2_ansible-*.tar.gz --force
  artifacts:
    paths:
      - "*.tar.gz"
    expire_in: 1 month
  only:
    - main
    - tags

# Security Scanning Stage
security:ansible-content:
  <<: *ansible_job
  stage: security-scan
  script:
    - pip install ansible-content-scanner
    - ansible-content-scanner scan . > security-report.json || true
  artifacts:
    paths:
      - security-report.json
    when: always
    expire_in: 1 week
  allow_failure: true

security:secrets:
  image: trufflesecurity/trufflehog:latest
  stage: security-scan
  script:
    - trufflehog filesystem --directory=. --json > secrets-scan.json
  artifacts:
    paths:
      - secrets-scan.json
    when: always
    expire_in: 1 week
  allow_failure: true

# Deployment Test Stage
deploy-test:k8s-cluster:
  <<: *ansible_job
  stage: deploy-test
  script:
    - echo "K8s cluster deployment tests disabled - require Docker-in-Docker"
  allow_failure: true
  only:
    - main
    - tags
  when: manual
