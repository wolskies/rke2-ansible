# SPDX-License-Identifier: GPL-3.0-or-later
# GitLab CI/CD Pipeline for RKE2 Ansible Collection - Self-Hosted Optimized
---
stages:
  - lint
  - unit-test
  - integration-test
  - build
  - security-scan
  - deploy-test
  - sync

variables:
  ANSIBLE_COLLECTIONS_PATH: "${CI_PROJECT_DIR}"
  ANSIBLE_HOST_KEY_CHECKING: "False"
  ANSIBLE_STDOUT_CALLBACK: "yaml"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/uv"
  # Self-hosted optimizations
  FF_USE_FASTZIP: "true"
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"
  GIT_DEPTH: "50"
  GIT_STRATEGY: "fetch"

# Self-hosted runner template
.self_hosted_template: &self_hosted
  tags:
    - docker
    - linux
    - self-hosted
  cache:
    key:
      files:
        - test-requirements.txt
    paths:
      - .cache/pip/
      - .cache/uv/
      - .cache/molecule/
      - .venv/
    policy: pull-push
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Fast linting job for self-hosted
.ansible_lint_job: &ansible_lint_job
  <<: *self_hosted
  image: quay.io/ansible/ansible-runner:latest
  before_script:
    - cp .ansible-lint /
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - source $HOME/.local/bin/env
    - uv venv .venv
    - source .venv/bin/activate
    - uv pip install -r test-requirements.txt

# Quick lint jobs (run in parallel)
lint:yaml:
  <<: *ansible_lint_job
  stage: lint
  script:
    - yamllint --version
    - yamllint -c .yamllint.yml .
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

lint:ansible:
  <<: *ansible_lint_job
  stage: lint
  script:
    - ansible-lint --version
    - ansible-lint roles/ playbooks/
  artifacts:
    reports:
      codequality: ansible-lint-report.json
    when: always
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

lint:syntax-all:
  <<: *ansible_lint_job
  stage: lint
  script:
    - make test-syntax
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Fast unit tests
test:unit:
  <<: *ansible_lint_job
  stage: unit-test
  script:
    - python3 -c "from tests.unit.test_basic import test_basic; test_basic(); print('Unit tests passed!')"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Build and test collection
build:collection:
  <<: *ansible_lint_job
  stage: build
  script:
    - ansible-galaxy collection build --force
    - ansible-galaxy collection install wolskinet-rke2_ansible-*.tar.gz --force
    - ansible-galaxy collection verify wolskinet.rke2_ansible
  artifacts:
    paths:
      - "*.tar.gz"
    expire_in: 1 month
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: "$CI_COMMIT_TAG"

# Security scanning (self-hosted specific)
security:secrets:
  <<: *self_hosted
  image: trufflesecurity/trufflehog:latest
  stage: security-scan
  script:
    - trufflehog filesystem --directory=. --json > secrets-scan.json || true
  artifacts:
    reports:
      security: secrets-scan.json
    when: always
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# GitHub sync job (self-hosted specific)
sync:github:
  <<: *self_hosted
  image: alpine/git:latest
  stage: sync
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$GITHUB_DEPLOY_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - git remote add github git@github.com:wolskies/rke2-ansible.git || true
    - git fetch github
    - git push github HEAD:main --force-with-lease
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        git push github $CI_COMMIT_TAG
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: "$CI_COMMIT_TAG"
  when: manual

# Release to Galaxy (manual)
release:galaxy:
  <<: *ansible_lint_job
  stage: deploy-test
  script:
    - ansible-galaxy collection build --force
    - ansible-galaxy collection publish *.tar.gz --api-key=$GALAXY_API_KEY
  artifacts:
    paths:
      - "*.tar.gz"
    expire_in: 1 month
  rules:
    - if: "$CI_COMMIT_TAG"
  when: manual
  environment:
    name: galaxy
    url: https://galaxy.ansible.com/wolskinet/rke2_ansible

# Optional: Full molecule tests (resource intensive)
test:molecule:full:
  <<: *self_hosted
  image: quay.io/ansible/ansible-runner:latest
  stage: integration-test
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - source $HOME/.local/bin/env
    - uv venv .venv
    - source .venv/bin/activate
    - uv pip install -r test-requirements.txt
    - ansible-galaxy collection install community.docker kubernetes.core community.general --force
  script:
    - |
      for role in deploy_rke2 helm_install longhorn_install; do
        echo "Testing role: $role"
        cd roles/$role
        molecule test --scenario-name default || echo "Role $role failed molecule test"
        cd ../..
      done
  artifacts:
    reports:
      junit: roles/*/molecule/default/junit.xml
    when: always
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  when: manual
  timeout: 2h
