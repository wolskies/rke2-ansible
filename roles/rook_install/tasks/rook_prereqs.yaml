# SPDX-License-Identifier: GPL-3.0-or-later
---
- name: Check Kernel Version and RBD Module Support
  tags: rook_prereqs
  block:
    - name: Check Linux kernel version (>= 4.17)
      ansible.builtin.fail:
        msg: "Rook requires at least Linux kernel 4.17. Detected version: {{ ansible_kernel }}"
      when: ansible_kernel is version('4.17', '<')

    - name: Check if rbd kernel module is loaded
      ansible.builtin.shell: |
        set -o pipefail
        lsmod | grep '^rbd'
      args:
        executable: /bin/bash
      register: rbd_module
      changed_when: false
      failed_when: false

    - name: Attempt to load rbd module if not loaded
      ansible.builtin.command: modprobe rbd
      when: rbd_module is defined and rbd_module.stdout == ""
      register: modprobe_rbd
      become: true
      changed_when: modprobe_rbd.rc == 0
      failed_when: modprobe_rbd.rc != 0

    - name: Fail if rbd module could not be loaded
      ansible.builtin.fail:
        msg: "The RBD kernel module is not available. Rook requires RBD support."
      when: modprobe_rbd is defined and modprobe_rbd is failed


- name: Check Kubernetes Version (v1.28 â€“ v1.33)
  tags: rook_prereqs
  block:
    - name: Get full Kubernetes version info
      ansible.builtin.command: kubectl version -o json
      register: kubectl_version_json
      changed_when: false

    - name: Set Kubernetes server version fact
      ansible.builtin.set_fact:
        k8s_server_version: >
          {{ (kubectl_version_json.stdout | from_json).serverVersion.gitVersion | regex_replace('^v', '') }}
      when: kubectl_version_json is defined

    - name: Fail if Kubernetes version is unsupported
      ansible.builtin.fail:
        msg: >
          Unsupported Kubernetes version {{ k8s_server_version }}.
          Rook requires Kubernetes >= 1.28 and < 1.34.
      when: >
        k8s_server_version is defined and
        (k8s_server_version is version('1.28', '<') or k8s_server_version is version('1.34', '>='))


- name: Ensure LVM2 package is installed (required by Rook Ceph)
  ansible.builtin.package:
    name: "{{ lvm_package }}"
    state: present
  vars:
    lvm_package: >-
      {{ 'lvm2' if ansible_facts.os_family in ['Debian', 'RedHat', 'Rocky', 'AlmaLinux', 'Suse'] else 'lvm2' }}
  become: true
  tags: lvm_check
