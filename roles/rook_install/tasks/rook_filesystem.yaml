# SPDX-License-Identifier: GPL-3.0-or-later
---
- name: Deploy CephFilesystem and StorageClass (optional)
  when: rook_ceph_enable_filesystem | bool
  block:

    - name: Create CephFilesystem
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: ceph.rook.io/v1
          kind: CephFilesystem
          metadata:
            name: "{{ rook_ceph_filesystem_name }}"
            namespace: "{{ rook_ceph_namespace }}"
          spec:
            metadataPool:
              replicated:
                size: "{{ rook_ceph_replica_size }}"
            dataPools:
              - replicated:
                  size: "{{ rook_ceph_replica_size }}"
      when: not (skip_kubernetes_operations or skip_helm_operations)
      tags: rook_filesystem

    - name: Create StorageClass for CephFS
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: "{{ rook_ceph_fs_storage_class }}"
          provisioner: rook-ceph.cephfs.csi.ceph.com
          parameters:
            clusterID: "{{ rook_ceph_namespace }}"
            fsName: "{{ rook_ceph_filesystem_name }}"
            csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner
            csi.storage.k8s.io/provisioner-secret-namespace: "{{ rook_ceph_namespace }}"
            csi.storage.k8s.io/controller-expand-secret-name: rook-csi-cephfs-provisioner
            csi.storage.k8s.io/controller-expand-secret-namespace: "{{ rook_ceph_namespace }}"
            csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node
            csi.storage.k8s.io/node-stage-secret-namespace: "{{ rook_ceph_namespace }}"
            csi.storage.k8s.io/fstype: ext4
          reclaimPolicy: Delete
          allowVolumeExpansion: true
          volumeBindingMode: Immediate
      when: not (skip_kubernetes_operations or skip_helm_operations)
      tags: rook_filesystem

    - name: Gather all StorageClasses for filesystem default cleanup
      community.kubernetes.k8s_info:
        api_version: storage.k8s.io/v1
        kind: StorageClass
      register: fs_storageclasses
      when: not (skip_kubernetes_operations or skip_helm_operations)
      tags: rook_filesystem

    - name: Remove default annotation from other SCs (if setting fs as default)
      community.kubernetes.k8s:
        api_version: storage.k8s.io/v1
        kind: StorageClass
        name: "{{ item.metadata.name }}"
        definition:
          metadata:
            annotations:
              storageclass.kubernetes.io/is-default-class: "false"
      loop: "{{ fs_storageclasses.resources }}"
      when:
        - rook_ceph_fs_make_default | bool
        - item.metadata.name != rook_ceph_fs_storage_class
        - item.metadata.annotations['storageclass.kubernetes.io/is-default-class'] | default('') == 'true'
        - not (skip_kubernetes_operations or skip_helm_operations)
      tags: rook_filesystem

    - name: Set CephFS StorageClass as default (if requested)
      community.kubernetes.k8s:
        api_version: storage.k8s.io/v1
        kind: StorageClass
        name: "{{ rook_ceph_fs_storage_class }}"
        definition:
          metadata:
            annotations:
              storageclass.kubernetes.io/is-default-class: "true"
      when:
        - rook_ceph_fs_make_default | bool
        - not (skip_kubernetes_operations or skip_helm_operations)
      tags: rook_filesystem

    - name: Display CephFilesystem configuration (test mode)
      ansible.builtin.debug:
        msg:
          - "CephFilesystem would be deployed with:"
          - "Filesystem Name: {{ rook_ceph_filesystem_name }}"
          - "Namespace: {{ rook_ceph_namespace }}"
          - "Replica Size: {{ rook_ceph_replica_size }}"
          - "Storage Class: {{ rook_ceph_fs_storage_class }}"
          - "Make Default: {{ rook_ceph_fs_make_default }}"
      when: skip_kubernetes_operations or skip_helm_operations
      tags: rook_filesystem
