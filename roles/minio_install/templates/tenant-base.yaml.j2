apiVersion: v1
kind: Namespace
metadata:
  name: {{ minio_tenant_namespace }}
---
apiVersion: v1
kind: Secret
metadata:
  name: storage-configuration
  namespace: {{ minio_tenant_namespace }}
stringData:
  config.env: |-
    export MINIO_ROOT_USER={{ minio_root_user }}
    export MINIO_ROOT_PASSWORD={{ minio_root_password }}
    export MINIO_STORAGE_CLASS_STANDARD={{ minio_storage_class_standard }}
    export MINIO_BROWSER={{ minio_browser }}
type: Opaque
---
apiVersion: v1
data:
  CONSOLE_ACCESS_KEY: {{ console_access_key | b64encode }}
  CONSOLE_SECRET_KEY: {{ console_secret_key | b64encode }}
kind: Secret
metadata:
  name: storage-user
  namespace: {{ minio_tenant_namespace }}
type: Opaque
---
apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  annotations:
    prometheus.io/path: /minio/v2/metrics/cluster
    prometheus.io/port: "9000"
    prometheus.io/scrape: "true"
  labels:
    app: minio
  name: {{ minio_tenant_name }}
  namespace: {{ minio_tenant_namespace }}
spec:
  certConfig: {}
  configuration:
    name: storage-configuration
  env: []
  externalCaCertSecret: []
  externalCertSecret:
    - name: {{ minio_tenant_name }}-tls
      type: cert-manager.io/v1
  externalClientCertSecrets: []
  features:
    bucketDNS: false
    domains: {}
  image: quay.io/minio/minio:RELEASE.2025-04-08T15-41-24Z
  imagePullSecret: {}
  mountPath: /export
  podManagementPolicy: Parallel
  pools:
  - affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    name: pool-0
    nodeSelector: {}
    resources: {}
    securityContext:
      fsGroup: 1000
      fsGroupChangePolicy: OnRootMismatch
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    servers: {{ minio_servers }}
    tolerations: []
    topologySpreadConstraints: []
    volumeClaimTemplate:
      apiVersion: v1
      kind: persistentvolumeclaims
      metadata: {}
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: {{ minio_storage_requests }}
        storageClassName: {{ minio_csi_driver_name }}
      status: {}
    volumesPerServer: {{ minio_volumes_per_server }}
  priorityClassName: ""
  requestAutoCert: false
  exposeServices:
    minio: true
    console: true
  serviceAccountName: ""
  serviceMetadata:
    consoleServiceAnnotations: {}
    consoleServiceLabels: {}
    minioServiceAnnotations: {}
    minioServiceLabels: {}
  subPath: ""
  users:
  - name: storage-user
