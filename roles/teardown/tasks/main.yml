# SPDX-License-Identifier: GPL-3.0-or-later
---
# tasks file for teardown
- name: RKE2 Cluster Teardown
  tags: [cleanup-rke2, always]
  block:
    - name: Download RKE2 uninstaller
      ansible.builtin.shell: |
        set -o pipefail
        curl -sfL https://get.rke2.io | sh -
      args:
        executable: /bin/bash
      become: true
      register: download_uninstaller_result
      changed_when: download_uninstaller_result.rc == 0
      failed_when: download_uninstaller_result.rc != 0

    - name: Stop and disable RKE2 services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        enabled: false
        daemon_reload: true
      loop:
        - rke2-server
        - rke2-agent
      become: true
      failed_when: false

    - name: Run RKE2 uninstaller
      ansible.builtin.command:
        cmd: /usr/local/bin/rke2-uninstall.sh
      become: true
      register: uninstaller_result
      changed_when: uninstaller_result.rc == 0
      failed_when: false

    - name: Remove additional RKE2 artifacts not cleaned by uninstaller
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /usr/local/bin/kubectl
        - /etc/systemd/system/rke2-server.service
        - /etc/systemd/system/rke2-agent.service
        - /etc/rancher
        - /var/lib/rancher
        - /opt/rke2
      become: true

- name: Configuration Files Cleanup
  tags: [cleanup-config, always]
  block:
    - name: Delete kubectl config and component directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ kubectl_config }}"
        - "{{ metallb_path }}"
        - "{{ cert_manager_path }}"
        - "{{ traefik_path }}"
        - "{{ rancher_path }}"
        - "{{ longhorn_path }}"
      become: true

- name: Container and Storage Cleanup
  tags: [cleanup-storage]
  become: true
  block:
    - name: Clean up container images and containerd data
      ansible.builtin.shell: |
        set -o pipefail
        # Stop containerd if running
        systemctl stop rke2-server rke2-agent || true

        # Clean containerd data if it exists
        if [ -d "/var/lib/rancher/rke2/agent/containerd" ]; then
          rm -rf /var/lib/rancher/rke2/agent/containerd/*
        fi

        # Clean up any leftover container processes
        pkill -f containerd || true
        pkill -f rke2 || true
      args:
        executable: /bin/bash
      failed_when: false
      changed_when: true

    - name: Remove additional storage and runtime directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/kubelet
        - /var/lib/cni
        - /var/log/containers
        - /var/log/pods
        - /run/containerd
        - /run/rke2
      failed_when: false

- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto
  tags: [cleanup-firewall]

- name: Remove UFW rules for all nodes
  community.general.ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
    comment: "{{ item.comment }}"
    delete: true
  loop: "{{ ufw_rules_common }}"
  notify: Reload UFW
  when:
    - firewall == 'ufw'
    - "'ufw' in ansible_facts.packages"
  become: true

- name: Remove UFW rules for controllers
  community.general.ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
    comment: "{{ item.comment }}"
    delete: true
  loop: "{{ ufw_rules_controllers }}"
  notify: Reload UFW
  when:
    - firewall == 'ufw'
    - inventory_hostname in groups['controllers']
    - "'ufw' in ansible_facts.packages"
  become: true

- name: Final cleanup and systemd refresh
  tags: [cleanup-rke2, always]
  become: true
  block:
    - name: Reload systemd daemon to remove deleted services
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Reset failed systemd units
      ansible.builtin.command:
        cmd: systemctl reset-failed
      failed_when: false
      changed_when: false

- name: Reboot System
  ansible.builtin.reboot:
